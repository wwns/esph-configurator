{"remainingRequest":"/home/pi/esph-configurator/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/pi/esph-configurator/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/pi/esph-configurator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pi/esph-configurator/src/components/BaseAccessoryConfig.vue?vue&type=template&id=d9e72b3a&","dependencies":[{"path":"/home/pi/esph-configurator/src/components/BaseAccessoryConfig.vue","mtime":1585120997000},{"path":"/home/pi/esph-configurator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"basic\" },\n    [\n      _c(\"h3\", { staticClass: \"title is-4\" }, [\n        _vm._v(_vm._s(_vm.types[_vm.type - 1].name) + \" Accessory Config\")\n      ]),\n      _c(\"hr\"),\n      _vm.description\n        ? _c(\n            \"b-notification\",\n            { attrs: { \"aria-close-label\": \"Close notification\" } },\n            [_vm._v(_vm._s(_vm.description))]\n          )\n        : _vm._e(),\n      _vm.type == 40\n        ? _c(\n            \"b-field\",\n            {\n              attrs: {\n                label: \"Door obstruction Detection Time\",\n                horizontal: \"\"\n              }\n            },\n            [\n              \"e\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"1\",\n                          max: \"65535\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value[\"e\"],\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"e\", $$v)\n                          },\n                          expression: \"value['e']\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"e\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Detection\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"e\", 0)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.type == 40\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Door Working Time\", horizontal: \"\" } },\n            [\n              _c(\"b-numberinput\", {\n                attrs: {\n                  min: \"1\",\n                  max: \"65535\",\n                  \"controls-position\": \"compact\",\n                  step: \"0.01\"\n                },\n                model: {\n                  value: _vm.value[\"d\"],\n                  callback: function($$v) {\n                    _vm.$set(_vm.value, \"d\", $$v)\n                  },\n                  expression: \"value['d']\"\n                }\n              })\n            ],\n            1\n          )\n        : _vm._e(),\n      \"valveTypes\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Valve Type\", horizontal: \"\" } },\n            [\n              _c(\n                \"b-select\",\n                {\n                  attrs: { placeholder: \"Water Valve\" },\n                  model: {\n                    value: _vm.value.w,\n                    callback: function($$v) {\n                      _vm.$set(_vm.value, \"w\", $$v)\n                    },\n                    expression: \"value.w\"\n                  }\n                },\n                _vm._l(_vm.acessoryType.valveTypes, function(option) {\n                  return _c(\n                    \"option\",\n                    { key: option.id, domProps: { value: option.id } },\n                    [_vm._v(_vm._s(option.name))]\n                  )\n                }),\n                0\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"sensorTypes\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Sensor Type\", horizontal: \"\" } },\n            [\n              _c(\n                \"b-select\",\n                {\n                  attrs: { placeholder: \"Sensor Type\" },\n                  model: {\n                    value: _vm.value.n,\n                    callback: function($$v) {\n                      _vm.$set(_vm.value, \"n\", $$v)\n                    },\n                    expression: \"value.n\"\n                  }\n                },\n                _vm._l(_vm.acessoryType.sensorTypes, function(option) {\n                  return _c(\n                    \"option\",\n                    { key: option.id, domProps: { value: option.id } },\n                    [_vm._v(_vm._s(option.name))]\n                  )\n                }),\n                0\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"sensorInput\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Sensor Input\", horizontal: \"\" } },\n            [\n              _c(\n                \"b-field\",\n                { attrs: { label: \"GPIO\" } },\n                [\n                  _c(\"b-numberinput\", {\n                    attrs: {\n                      min: \"0\",\n                      max: \"1024\",\n                      \"controls-position\": \"compact\"\n                    },\n                    model: {\n                      value: _vm.value.g,\n                      callback: function($$v) {\n                        _vm.$set(_vm.value, \"g\", $$v)\n                      },\n                      expression: \"value.g\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"poll\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Sensor poll interval [s]\", horizontal: \"\" } },\n            [\n              \"j\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"3\",\n                          max: \"65535\",\n                          \"controls-position\": \"compact\",\n                          step: \"1\"\n                        },\n                        model: {\n                          value: _vm.value.j,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"j\", $$v)\n                          },\n                          expression: \"value.j\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"j\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Poll\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"j\", 30)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"thermostatTypes\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Thermostat Type\", horizontal: \"\" } },\n            [\n              _c(\n                \"b-select\",\n                {\n                  attrs: { placeholder: \"Thermostat Type\" },\n                  model: {\n                    value: _vm.value.w,\n                    callback: function($$v) {\n                      _vm.$set(_vm.value, \"w\", $$v)\n                    },\n                    expression: \"value.w\"\n                  }\n                },\n                _vm._l(_vm.acessoryType.thermostatTypes, function(option) {\n                  return _c(\n                    \"option\",\n                    { key: option.id, domProps: { value: option.id } },\n                    [_vm._v(_vm._s(option.name))]\n                  )\n                }),\n                0\n              )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"temperatureOffset\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Temperature Offset\", horizontal: \"\" } },\n            [\n              \"z\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"-100\",\n                          max: \"100\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value.z,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"z\", $$v)\n                          },\n                          expression: \"value.z\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"z\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Offset\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"z\", 0)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"humidityOffset\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Humidity Offset\", horizontal: \"\" } },\n            [\n              \"h\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"-100\",\n                          max: \"100\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value.h,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"h\", $$v)\n                          },\n                          expression: \"value.h\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"h\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Offset\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"h\", 0)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"temperature\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"min Temperature [°C]\", horizontal: \"\" } },\n            [\n              \"m\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"-100\",\n                          max: \"100\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value.m,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"m\", $$v)\n                          },\n                          expression: \"value.m\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"m\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Temp\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"m\", 10)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"temperature\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"max Temperature [°C]\", horizontal: \"\" } },\n            [\n              \"x\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"-100\",\n                          max: \"100\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value.x,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"x\", $$v)\n                          },\n                          expression: \"value.x\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"x\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Temp\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"x\", 10)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      \"temperature\" in _vm.acessoryType\n        ? _c(\n            \"b-field\",\n            { attrs: { label: \"Temperature deadband [°C]\", horizontal: \"\" } },\n            [\n              \"d\" in _vm.value\n                ? _c(\n                    \"b-field\",\n                    { attrs: { grouped: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"-100\",\n                          max: \"100\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value.d,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"d\", $$v)\n                          },\n                          expression: \"value.d\"\n                        }\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.RemoveProp(\"d\")\n                            }\n                          }\n                        },\n                        [_vm._v(\"Rem Temp\")]\n                      )\n                    ],\n                    1\n                  )\n                : _c(\n                    \"b-button\",\n                    {\n                      on: {\n                        click: function() {\n                          return _vm.AddProp(\"d\", 10)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Add\")]\n                  )\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"div\",\n        { staticClass: \"basic\" },\n        [\n          _vm.value.t == 20\n            ? _c(\n                \"b-field\",\n                { attrs: { label: \"Maximum On Time [s]\", horizontal: \"\" } },\n                [\n                  \"d\" in _vm.value\n                    ? _c(\n                        \"b-field\",\n                        { attrs: { grouped: \"\" } },\n                        [\n                          _c(\"b-numberinput\", {\n                            attrs: {\n                              min: \"0\",\n                              max: \"10000000\",\n                              \"controls-position\": \"compact\",\n                              step: \"1\"\n                            },\n                            model: {\n                              value: _vm.value.d,\n                              callback: function($$v) {\n                                _vm.$set(_vm.value, \"d\", $$v)\n                              },\n                              expression: \"value.d\"\n                            }\n                          }),\n                          _c(\n                            \"b-button\",\n                            {\n                              on: {\n                                click: function() {\n                                  return (_vm.value.d = 0)\n                                }\n                              }\n                            },\n                            [_vm._v(\"Disable Time\")]\n                          )\n                        ],\n                        1\n                      )\n                    : _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.AddProp(\"d\", 3600)\n                            }\n                          }\n                        },\n                        [_vm._v(\"Add\")]\n                      )\n                ],\n                1\n              )\n            : _vm._e(),\n          \"inching\" in _vm.acessoryType\n            ? _c(\n                \"b-field\",\n                {\n                  attrs: {\n                    label: \"Reset to Default State Time [s]\",\n                    horizontal: \"\"\n                  }\n                },\n                [\n                  \"i\" in _vm.value\n                    ? _c(\n                        \"b-field\",\n                        { attrs: { grouped: \"\" } },\n                        [\n                          _c(\"b-numberinput\", {\n                            attrs: {\n                              min: \"0\",\n                              max: \"10000000\",\n                              \"controls-position\": \"compact\",\n                              step: \"0.01\"\n                            },\n                            model: {\n                              value: _vm.value.i,\n                              callback: function($$v) {\n                                _vm.$set(_vm.value, \"i\", $$v)\n                              },\n                              expression: \"value.i\"\n                            }\n                          }),\n                          _c(\n                            \"b-button\",\n                            {\n                              on: {\n                                click: function() {\n                                  return _vm.RemoveProp(\"i\")\n                                }\n                              }\n                            },\n                            [_vm._v(\"Rem Time\")]\n                          )\n                        ],\n                        1\n                      )\n                    : _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.AddProp(\"i\", 1)\n                            }\n                          }\n                        },\n                        [_vm._v(\"Add\")]\n                      )\n                ],\n                1\n              )\n            : _vm._e(),\n          \"reboot\" in _vm.acessoryType\n            ? _c(\"FormRebootStateConfig\", {\n                attrs: { \"reboot-states\": _vm.rebootStates },\n                model: {\n                  value: _vm.value,\n                  callback: function($$v) {\n                    _vm.value = $$v\n                  },\n                  expression: \"value\"\n                }\n              })\n            : _vm._e(),\n          \"autodimmer\" in _vm.acessoryType\n            ? _c(\n                \"div\",\n                { staticClass: \"basic\" },\n                [\n                  _c(\"h5\", { staticClass: \"title is-5\" }, [_vm._v(\"RGB GPIO\")]),\n                  _c(\n                    \"b-notification\",\n                    { attrs: { \"aria-close-label\": \"Close notification\" } },\n                    [\n                      _vm._v(\n                        '\\n        2-channels selectable temperature color: declare \"v\" for cool white and \"w\" for warm white.\\n        '\n                      ),\n                      _c(\"br\"),\n                      _vm._v(\n                        'RGB: declare \"r\", \"g\" and \"v\" for Red, Green and Blue colors.\\n        '\n                      ),\n                      _c(\"br\"),\n                      _vm._v(\n                        'RGBW: declare \"r\", \"g\", \"v\" and \"w\" for Red, Green, Blue and White colors.\\n      '\n                      )\n                    ]\n                  ),\n                  _vm._l({ r: \"r\", g: \"g\", v: \"b\", w: \"w\" }, function(\n                    name,\n                    channel\n                  ) {\n                    return _c(\n                      \"b-field\",\n                      {\n                        key: channel,\n                        attrs: {\n                          label: name.toUpperCase() + \" Channel\",\n                          horizontal: \"\"\n                        }\n                      },\n                      [\n                        channel in _vm.value\n                          ? _c(\n                              \"b-field\",\n                              { attrs: { grouped: \"\" } },\n                              [\n                                _c(\n                                  \"b-field\",\n                                  { attrs: { label: \"GPIO\" } },\n                                  [\n                                    _c(\"b-numberinput\", {\n                                      attrs: {\n                                        min: \"0\",\n                                        max: \"254\",\n                                        \"controls-position\": \"compact\",\n                                        step: \"1\"\n                                      },\n                                      model: {\n                                        value: _vm.value[channel],\n                                        callback: function($$v) {\n                                          _vm.$set(_vm.value, channel, $$v)\n                                        },\n                                        expression: \"value[channel]\"\n                                      }\n                                    })\n                                  ],\n                                  1\n                                ),\n                                _c(\n                                  \"b-field\",\n                                  { attrs: { label: \"Factor\" } },\n                                  [\n                                    _c(\"b-numberinput\", {\n                                      attrs: {\n                                        min: \"0.01\",\n                                        max: \"1000\",\n                                        \"controls-position\": \"compact\",\n                                        step: \"0.01\"\n                                      },\n                                      model: {\n                                        value: _vm.value[\"f\" + channel],\n                                        callback: function($$v) {\n                                          _vm.$set(\n                                            _vm.value,\n                                            \"f\" + channel,\n                                            $$v\n                                          )\n                                        },\n                                        expression: \"value[`f${channel}`]\"\n                                      }\n                                    })\n                                  ],\n                                  1\n                                ),\n                                _c(\n                                  \"b-field\",\n                                  { attrs: { label: \"Action\" } },\n                                  [\n                                    _c(\n                                      \"b-button\",\n                                      {\n                                        on: {\n                                          click: function() {\n                                            _vm.RemoveProp(channel)\n                                            _vm.RemoveProp(\"f\" + channel)\n                                          }\n                                        }\n                                      },\n                                      [_vm._v(\"Rem Channel\")]\n                                    )\n                                  ],\n                                  1\n                                )\n                              ],\n                              1\n                            )\n                          : _c(\n                              \"b-button\",\n                              {\n                                on: {\n                                  click: function() {\n                                    _vm.AddProp(channel, 10)\n                                    _vm.AddProp(\"f\" + channel, 1)\n                                  }\n                                }\n                              },\n                              [_vm._v(\"Add\")]\n                            )\n                      ],\n                      1\n                    )\n                  }),\n                  _c(\n                    \"b-field\",\n                    { attrs: { label: \"Step Value\", horizontal: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"1\",\n                          max: \"65535\",\n                          \"controls-position\": \"compact\",\n                          step: \"1\"\n                        },\n                        model: {\n                          value: _vm.value.p,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"p\", $$v)\n                          },\n                          expression: \"value.p\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"b-field\",\n                    { attrs: { label: \"Step Delay [s]\", horizontal: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"0.01\",\n                          max: \"65.5\",\n                          \"controls-position\": \"compact\",\n                          step: \"0.01\"\n                        },\n                        model: {\n                          value: _vm.value.d,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"d\", $$v)\n                          },\n                          expression: \"value.d\"\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"b-field\",\n                    { attrs: { label: \"Autodimmer Step %\", horizontal: \"\" } },\n                    [\n                      _c(\"b-numberinput\", {\n                        attrs: {\n                          min: \"1\",\n                          max: \"50\",\n                          \"controls-position\": \"compact\",\n                          step: \"1\"\n                        },\n                        model: {\n                          value: _vm.value.e,\n                          callback: function($$v) {\n                            _vm.$set(_vm.value, \"e\", $$v)\n                          },\n                          expression: \"value.e\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                2\n              )\n            : _vm._e(),\n          \"cyclic\" in _vm.acessoryType\n            ? _c(\n                \"div\",\n                { staticClass: \"basic\" },\n                [\n                  _c(\"h5\", { staticClass: \"title is-5\" }, [\n                    _vm._v(\"Cyclic Inputs\")\n                  ]),\n                  _c(\n                    \"b-notification\",\n                    { attrs: { \"aria-close-label\": \"Close notification\" } },\n                    [\n                      _vm._v(\n                        \"Cyclic Inputs advance the accessory state on activation. State Inputs change the acessory state to the target state.\"\n                      )\n                    ]\n                  ),\n                  _c(\n                    \"b-field\",\n                    { attrs: { label: \"States\", horizontal: \"\" } },\n                    [\n                      _c(\n                        \"b-taglist\",\n                        _vm._l(_vm.acessoryStates, function(state) {\n                          return _c(\n                            \"b-tag\",\n                            { key: state.id, attrs: { type: \"is-primary\" } },\n                            [_vm._v(_vm._s(state.name))]\n                          )\n                        }),\n                        1\n                      )\n                    ],\n                    1\n                  ),\n                  _c(\n                    \"b-field\",\n                    {\n                      staticClass: \"buttons-container\",\n                      attrs: { label: \"Cyclic - Inputs\", horizontal: \"\" }\n                    },\n                    [\n                      _vm._l(_vm.value.b, function(b, i) {\n                        return _c(\n                          \"div\",\n                          { key: i },\n                          [\n                            _c(\"DigitalInputConfig\", {\n                              on: {\n                                remove: function() {\n                                  return _vm.RemoveEl(_vm.value.b, i)\n                                }\n                              },\n                              model: {\n                                value: _vm.value.b[i],\n                                callback: function($$v) {\n                                  _vm.$set(_vm.value.b, i, $$v)\n                                },\n                                expression: \"value.b[i]\"\n                              }\n                            }),\n                            _c(\"hr\")\n                          ],\n                          1\n                        )\n                      }),\n                      _c(\n                        \"b-button\",\n                        {\n                          on: {\n                            click: function() {\n                              return _vm.AddEl(\n                                _vm.value.b,\n                                _vm.value.b.length,\n                                { g: 0, t: 1 }\n                              )\n                            }\n                          }\n                        },\n                        [_vm._v(\"Add Cyclic Input\")]\n                      )\n                    ],\n                    2\n                  )\n                ],\n                1\n              )\n            : _vm._e(),\n          _c(\"FormIOs\", {\n            attrs: {\n              \"action-inputs\":\n                _vm.acessoryType.stateInputs || _vm.acessoryType.states,\n              \"action-outputs\": _vm.acessoryType.states\n            },\n            model: {\n              value: _vm.value,\n              callback: function($$v) {\n                _vm.value = $$v\n              },\n              expression: \"value\"\n            }\n          }),\n          _c(\n            \"b-button\",\n            {\n              attrs: { type: \"is-danger\" },\n              on: {\n                click: function() {\n                  return _vm.$emit(\"remove\")\n                }\n              }\n            },\n            [_vm._v(\"Remove Accessory\")]\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}