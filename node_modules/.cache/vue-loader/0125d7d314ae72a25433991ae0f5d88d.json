{"remainingRequest":"/home/pi/esph-configurator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pi/esph-configurator/src/components/BaseAccessoryConfig.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/pi/esph-configurator/src/components/BaseAccessoryConfig.vue","mtime":1585120997000},{"path":"/home/pi/esph-configurator/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pi/esph-configurator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.basic {\n  margin-top: 2rem;\n}\n\n.buttons-container .field-body {\n  flex-wrap: wrap;\n}\n\n.buttons-container .field-body > .field {\n  width: 100%;\n}\n\n.button-remove {\n  margin-top: 1rem;\n}\n\n.acessory-states {\n  margin-bottom: 0.75rem;\n}\n\nspan.tag.is-primary {\n  margin-left: 0.5rem;\n}\n",{"version":3,"sources":["BaseAccessoryConfig.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwpBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"BaseAccessoryConfig.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"basic\">\n    <h3 class=\"title is-4\">{{ types[(type-1)].name }} Accessory Config</h3>\n\n    <hr />\n\n    <b-notification v-if=\"description\" aria-close-label=\"Close notification\">{{ description }}</b-notification>\n\n    <!-- Garaga -->\n    <b-field v-if=\"type == 40\" label=\"Door obstruction Detection Time\" horizontal>\n      <b-field v-if=\"'e' in value\" grouped>\n        <b-numberinput v-model=\"value['e']\" min=\"1\" max=\"65535\" controls-position=\"compact\" step=\"0.01\" />\n        <b-button @click=\"()=>RemoveProp('e')\">Rem Detection</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('e',0)\">Add</b-button>\n    </b-field>\n    \n    <b-field v-if=\"type == 40\" label=\"Door Working Time\" horizontal>\n      <b-numberinput v-model=\"value['d']\" min=\"1\" max=\"65535\" controls-position=\"compact\" step=\"0.01\" />\n    </b-field>\n\n    <!-- Water Valve -->\n    <b-field v-if=\"'valveTypes' in acessoryType\" label=\"Valve Type\" horizontal>\n      <b-select v-model=\"value.w\" placeholder=\"Water Valve\">\n        <option\n          v-for=\"option in acessoryType.valveTypes\"\n          :key=\"option.id\"\n          :value=\"option.id\"\n        >{{ option.name }}</option>\n      </b-select>\n    </b-field>\n\n    <!-- External Sensor -->\n\n    <b-field v-if=\"'sensorTypes' in acessoryType\" label=\"Sensor Type\" horizontal>\n      <b-select v-model=\"value.n\" placeholder=\"Sensor Type\">\n        <option\n          v-for=\"option in acessoryType.sensorTypes\"\n          :key=\"option.id\"\n          :value=\"option.id\"\n        >{{ option.name }}</option>\n      </b-select>\n    </b-field>\n\n    <b-field v-if=\"'sensorInput' in acessoryType\" label=\"Sensor Input\" horizontal>\n      <b-field label=\"GPIO\">\n        <b-numberinput v-model=\"value.g\" min=\"0\" max=\"1024\" controls-position=\"compact\" />\n      </b-field>\n    </b-field>\n\n    <b-field v-if=\"'poll' in acessoryType\" label=\"Sensor poll interval [s]\" horizontal>\n      <b-field v-if=\"'j' in value\" grouped>\n        <b-numberinput v-model=\"value.j\" min=\"3\" max=\"65535\" controls-position=\"compact\" step=\"1\" />\n        <b-button @click=\"()=>RemoveProp('j')\">Rem Poll</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('j',30)\">Add</b-button>\n    </b-field>\n\n    <!-- Thermostat -->\n\n    <b-field v-if=\"'thermostatTypes' in acessoryType\" label=\"Thermostat Type\" horizontal>\n      <b-select v-model=\"value.w\" placeholder=\"Thermostat Type\">\n        <option\n          v-for=\"option in acessoryType.thermostatTypes\"\n          :key=\"option.id\"\n          :value=\"option.id\"\n        >{{ option.name }}</option>\n      </b-select>\n    </b-field>\n\n    <b-field v-if=\"'temperatureOffset' in acessoryType\" label=\"Temperature Offset\" horizontal>\n      <b-field v-if=\"'z' in value\" grouped>\n        <b-numberinput v-model=\"value.z\" min=\"-100\" max=\"100\" controls-position=\"compact\" step=\"0.01\" />\n        <b-button @click=\"()=>RemoveProp('z')\">Rem Offset</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('z',0)\">Add</b-button>\n    </b-field>\n\n    <b-field v-if=\"'humidityOffset' in acessoryType\" label=\"Humidity Offset\" horizontal>\n      <b-field v-if=\"'h' in value\" grouped>\n        <b-numberinput v-model=\"value.h\" min=\"-100\" max=\"100\" controls-position=\"compact\" step=\"0.01\" />\n        <b-button @click=\"()=>RemoveProp('h')\">Rem Offset</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('h',0)\">Add</b-button>\n    </b-field>\n\n    <b-field v-if=\"'temperature' in acessoryType\" label=\"min Temperature [°C]\" horizontal>\n      <b-field v-if=\"'m' in value\" grouped>\n        <b-numberinput\n          v-model=\"value.m\"\n          min=\"-100\"\n          max=\"100\"\n          controls-position=\"compact\"\n          step=\"0.01\"\n        />\n        <b-button @click=\"()=>RemoveProp('m')\">Rem Temp</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('m',10)\">Add</b-button>\n    </b-field>\n\n    <b-field v-if=\"'temperature' in acessoryType\" label=\"max Temperature [°C]\" horizontal>\n      <b-field v-if=\"'x' in value\" grouped>\n        <b-numberinput\n          v-model=\"value.x\"\n          min=\"-100\"\n          max=\"100\"\n          controls-position=\"compact\"\n          step=\"0.01\"\n        />\n        <b-button @click=\"()=>RemoveProp('x')\">Rem Temp</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('x',10)\">Add</b-button>\n    </b-field>\n\n    <b-field v-if=\"'temperature' in acessoryType\" label=\"Temperature deadband [°C]\" horizontal>\n      <b-field v-if=\"'d' in value\" grouped>\n        <b-numberinput\n          v-model=\"value.d\"\n          min=\"-100\"\n          max=\"100\"\n          controls-position=\"compact\"\n          step=\"0.01\"\n        />\n        <b-button @click=\"()=>RemoveProp('d')\">Rem Temp</b-button>\n      </b-field>\n      <b-button v-else @click=\"()=>AddProp('d',10)\">Add</b-button>\n    </b-field>\n\n    <!-- Inching -->\n\n    <div class=\"basic\">\n      <b-field v-if=\"value.t == 20\" label=\"Maximum On Time [s]\" horizontal>\n        <b-field v-if=\"'d' in value\" grouped>\n          <b-numberinput\n            v-model=\"value.d\"\n            min=\"0\"\n            max=\"10000000\"\n            controls-position=\"compact\"\n            step=\"1\"\n          />\n          <b-button @click=\"()=>value.d = 0\">Disable Time</b-button>\n        </b-field>\n        <b-button v-else @click=\"()=>AddProp('d',3600)\">Add</b-button>\n      </b-field>\n\n      <b-field v-if=\"'inching' in acessoryType\" label=\"Reset to Default State Time [s]\" horizontal>\n        <b-field v-if=\"'i' in value\" grouped>\n          <b-numberinput\n            v-model=\"value.i\"\n            min=\"0\"\n            max=\"10000000\"\n            controls-position=\"compact\"\n            step=\"0.01\"\n          />\n          <b-button @click=\"()=>RemoveProp('i')\">Rem Time</b-button>\n        </b-field>\n        <b-button v-else @click=\"()=>AddProp('i',1)\">Add</b-button>\n      </b-field>\n\n      <FormRebootStateConfig\n        v-if=\"'reboot' in acessoryType\"\n        v-model=\"value\"\n        :reboot-states=\"rebootStates\"\n      />\n\n      <!-- Autodimmer -->\n\n      <div v-if=\"'autodimmer' in acessoryType\" class=\"basic\">\n        <h5 class=\"title is-5\">RGB GPIO</h5>\n\n        <b-notification aria-close-label=\"Close notification\">\n          2-channels selectable temperature color: declare \"v\" for cool white and \"w\" for warm white.\n          <br />RGB: declare \"r\", \"g\" and \"v\" for Red, Green and Blue colors.\n          <br />RGBW: declare \"r\", \"g\", \"v\" and \"w\" for Red, Green, Blue and White colors.\n        </b-notification>\n\n        <b-field\n          v-for=\"(name ,channel) in {'r':'r','g':'g','v':'b','w':'w'}\"\n          :key=\"channel\"\n          :label=\"name.toUpperCase() + ' Channel'\"\n          horizontal\n        >\n          <b-field v-if=\"channel in value\" grouped>\n            <b-field label=\"GPIO\">\n              <b-numberinput\n                v-model=\"value[channel]\"\n                min=\"0\"\n                max=\"254\"\n                controls-position=\"compact\"\n                step=\"1\"\n              />\n            </b-field>\n            <b-field label=\"Factor\">\n              <b-numberinput\n                v-model=\"value[`f${channel}`]\"\n                min=\"0.01\"\n                max=\"1000\"\n                controls-position=\"compact\"\n                step=\"0.01\"\n              />\n            </b-field>\n            <b-field label=\"Action\">\n              <b-button @click=\"()=>{RemoveProp(channel);RemoveProp(`f${channel}`)}\">Rem Channel</b-button>\n            </b-field>\n          </b-field>\n          <b-button v-else @click=\"()=>{AddProp(channel,10);AddProp(`f${channel}`,1)}\">Add</b-button>\n        </b-field>\n\n        <b-field label=\"Step Value\" horizontal>\n          <b-numberinput\n            v-model=\"value.p\"\n            min=\"1\"\n            max=\"65535\"\n            controls-position=\"compact\"\n            step=\"1\"\n          />\n        </b-field>\n        <b-field label=\"Step Delay [s]\" horizontal>\n          <b-numberinput\n            v-model=\"value.d\"\n            min=\"0.01\"\n            max=\"65.5\"\n            controls-position=\"compact\"\n            step=\"0.01\"\n          />\n        </b-field>\n        <b-field label=\"Autodimmer Step %\" horizontal>\n          <b-numberinput v-model=\"value.e\" min=\"1\" max=\"50\" controls-position=\"compact\" step=\"1\" />\n        </b-field>\n      </div>\n\n      <div v-if=\"'cyclic' in acessoryType\" class=\"basic\">\n        <h5 class=\"title is-5\">Cyclic Inputs</h5>\n\n        <b-notification\n          aria-close-label=\"Close notification\"\n        >Cyclic Inputs advance the accessory state on activation. State Inputs change the acessory state to the target state.</b-notification>\n\n        <b-field label=\"States\" horizontal>\n          <b-taglist>\n            <b-tag\n              v-for=\"state in acessoryStates\"\n              :key=\"state.id\"\n              type=\"is-primary\"\n            >{{ state.name }}</b-tag>\n          </b-taglist>\n        </b-field>\n\n        <b-field label=\"Cyclic - Inputs\" horizontal class=\"buttons-container\">\n          <div v-for=\"(b, i) in value.b\" :key=\"i\">\n            <DigitalInputConfig v-model=\"value.b[i]\" @remove=\"()=>RemoveEl(value.b, i)\" />\n\n            <hr />\n          </div>\n\n          <b-button @click=\"()=>AddEl(value.b, value.b.length, { g:0, t:1 })\">Add Cyclic Input</b-button>\n        </b-field>\n      </div>\n\n      <FormIOs\n        v-model=\"value\"\n        :action-inputs=\"acessoryType.stateInputs || acessoryType.states\"\n        :action-outputs=\"acessoryType.states\"\n      />\n\n      <b-button type=\"is-danger\" @click=\"()=>$emit('remove')\">Remove Accessory</b-button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue, Watch } from 'vue-property-decorator'\n\nimport DigitalInputConfig from '@/components/DigitalInputConfig.vue'\nimport DigitalOutputConfig from '@/components/DigitalOutputConfig.vue'\nimport FormIOs from '@/components/FormIOs.vue'\nimport FormRebootStateConfig from '@/components/FormRebootStateConfig.vue'\n\nimport { esphConfig, generalConfig, baseAccessoryConfig, switchAccessoryConfig } from '@/esphConfigTypes'\nimport { types } from '@/accessoryTypes'\n\n@Component({\n  components: {\n    DigitalInputConfig,\n    FormRebootStateConfig,\n    FormIOs,\n    DigitalOutputConfig\n  }\n})\nexport default class BaseAccessoryConfig extends Vue {\n\n  public types = types\n\n  get type() {\n    return this.value.t || 1\n  }\n\n  get acessoryType() {\n\n    switch (this.type) {\n      case 1:\n        return {\n          states: [\n            { id: 0, name: 'ON' },\n            { id: 1, name: 'OFF' }\n          ],\n          reboot: [\n            { id: 0, name: 'Default - OFF.' },\n            { id: 1, name: 'ON.' },\n            { id: 4, name: 'Defined by fixed inputs.' },\n            { id: 5, name: 'Last state.' },\n            { id: 6, name: 'Opposite to last state.' }\n          ],\n          defaults: {\n            b: [],\n            s: 0\n          },\n          inching: true,\n          description: 'Type Switch',\n          cyclic: true\n        }\n      case 2:\n        return {\n          states: [\n            { id: 0, name: 'ON' },\n            { id: 1, name: 'OFF' }\n          ],\n          reboot: [\n            { id: 0, name: 'Default - OFF.' },\n            { id: 1, name: 'ON.' },\n            { id: 4, name: 'Defined by fixed inputs.' },\n            { id: 5, name: 'Last state.' },\n            { id: 6, name: 'Opposite to last state.' }\n          ],\n          defaults: {\n            b: [],\n            s: 0\n          },\n          inching: true,\n          description: 'An Outlet',\n          cyclic: true\n        }\n      case 3:\n        return {\n          states: [\n            { id: 0, name: 'Singlepress' },\n            { id: 1, name: 'Doublepress' },\n            { id: 2, name: 'Longpress' }\n          ],\n          defaults: {\n            b: [],\n            s: 0\n          },\n          description: 'A stateless HomeKit button.'\n        }\n      case 4:\n        return {\n          states: [\n            { id: 0, name: 'UNLOCK' },\n            { id: 1, name: 'LOCK' }\n          ],\n          reboot: [\n            { id: 0, name: 'UNLOCKED.' },\n            { id: 1, name: 'Default - LOCKED.' },\n            { id: 4, name: 'Defined by fixed inputs.' },\n            { id: 5, name: 'Last state.' },\n            { id: 6, name: 'Opposite to last state.' }\n          ],\n          defaults: {\n            b: [],\n            s: 0\n          },\n          inching: true,\n          description: 'A lock mechanism',\n          cyclic: true\n        }\n\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 11:\n      case 12:\n        return {\n          states: [\n            { id: 0, name: 'disabled. Default' },\n            { id: 1, name: 'enabled' }\n          ],\n          defaults: {\n            s: 0\n          },\n          inching: true,\n          description: ''\n        }\n      case 20:\n        return {\n          states: [\n            { id: 0, name: 'disabled. Default' },\n            { id: 1, name: 'enabled' }\n          ],\n          reboot: [\n            { id: 0, name: 'Default - OFF.' },\n            { id: 1, name: 'ON.' },\n            { id: 4, name: 'Defined by fixed inputs.' },\n            { id: 5, name: 'Last state.' },\n            { id: 6, name: 'Opposite to last state.' }\n          ],\n          defaults: {\n            b: [],\n            s: 0,\n            w: 0,\n            d: 3600\n          },\n          valveTypes: [\n            { id: 0, name: 'Default. Water Valve' },\n            { id: 1, name: 'Sprinkler' },\n            { id: 2, name: 'Shower' },\n            { id: 3, name: 'Tap' }\n          ],\n          inching: true,\n          description: '',\n          cyclic: true\n        }\n\n      case 21:\n        return {\n          states: [\n            { id: 0, name: 'Total OFF' },\n            { id: 1, name: 'Thermostat ON, but heating OFF' },\n            { id: 2, name: 'Thermostat ON, cooling OFF' },\n            { id: 3, name: 'Heating ON' },\n            { id: 4, name: 'Cooling ON' },\n            { id: 5, name: 'Sensor error' }\n          ],\n          temperatureOffset: true,\n          sensorInput: true,\n          sensorTypes: [\n            { id: 1, name: 'DHT11' },\n            { id: 2, name: 'DHT22 - Default' },\n            { id: 3, name: 'DS18B20' },\n            { id: 4, name: 'Si7021 (not recommended)' }\n          ],\n          humidityOffset: true,\n          temperature: true,\n          poll: true,\n          thermostatTypes: [\n            { id: 1, name: 'Heater - Default' },\n            { id: 2, name: 'Cooler' },\n            { id: 3, name: 'Heater & Cooler' }\n          ],\n          reboot: [\n            { id: 0, name: 'Default - OFF' },\n            { id: 1, name: 'Heating' },\n            { id: 2, name: 'Cooling' },\n            { id: 4, name: 'Defined by fixed inputs' },\n            { id: 5, name: 'Last state' }\n          ],\n          stateInputs: [\n            { id: '0', name: 'Set mode OFF' },\n            { id: '1', name: 'Set mode heater' },\n            { id: '2', name: 'Set mode cooler' },\n            { id: '3', name: 'Change target temperature by +0.5º' },\n            { id: '4', name: 'Change target temperature by -0.5º' }\n          ],\n          defaults: {\n            b: [],\n            g: 0,\n            n: 2\n          },\n          description: 'A HomeKit Thermostat. It requires a compatible sensor.',\n          cyclic: true\n        }\n\n      case 22:\n        return {\n          states: [\n            { id: 5, name: 'Sensor error' }\n          ],\n          sensorInput: true,\n          sensorTypes: [\n            { id: 1, name: 'DHT11' },\n            { id: 2, name: 'DHT22 - Default' },\n            { id: 3, name: 'DS18B20' },\n            { id: 4, name: 'Si7021 (not recommended)' }\n          ],\n          temperatureOffset: true,\n          poll: true,\n          defaults: {\n            b: []\n          },\n          stateInputs: [],\n          description: 'A HomeKit Thermometer. It requires a compatible sensor.'\n        }\n      case 23:\n        return {\n          states: [\n            { id: 5, name: 'Sensor error' }\n          ],\n          sensorInput: true,\n          sensorTypes: [\n            { id: 1, name: 'DHT11' },\n            { id: 2, name: 'DHT22 - Default' },\n            { id: 3, name: 'DS18B20' },\n            { id: 4, name: 'Si7021 (not recommended)' }\n          ],\n          humidityOffset: true,\n          poll: true,\n          defaults: {\n            b: []\n          },\n          stateInputs: [],\n          description: 'A HomeKit Humidity Sensor. It requires a compatible sensor.'\n        }\n      case 24:\n        return {\n          states: [\n            { id: 5, name: 'Sensor error' }\n          ],\n          sensorInput: true,\n          sensorTypes: [\n            { id: 1, name: 'DHT11' },\n            { id: 2, name: 'DHT22 - Default' },\n            { id: 3, name: 'DS18B20' },\n            { id: 4, name: 'Si7021 (not recommended)' }\n          ],\n          temperatureOffset: true,\n          humidityOffset: true,\n          poll: true,\n          defaults: {\n            b: []\n          },\n          stateInputs: [],\n          description: 'A HomeKit Thermometer & Humidity Sensor. It requires a compatible sensor.'\n        }\n      case 30:\n        return {\n          states: [\n            { id: 0, name: 'ON' },\n            { id: 1, name: 'OFF' }\n          ],\n          reboot: [\n            { id: 0, name: 'Default - OFF.' },\n            { id: 1, name: 'ON.' },\n            { id: 4, name: 'Defined by fixed inputs.' },\n            { id: 5, name: 'Last state.' },\n            { id: 6, name: 'Opposite to last state.' }\n          ],\n          autodimmer: true,\n          cyclic: true,\n          defaults: {\n            s: 0,\n            p: 1024,\n            d: 1,\n            e: 10,\n            fr: 1,\n            fg: 1,\n            fv: 1,\n            b: []\n          },\n          stateInputs: [\n            { id: 0, name: 'Turns off lightbulb' },\n            { id: 1, name: 'Turns on lightbulb' },\n            { id: 2, name: 'Increase brightness by 10%' },\n            { id: 3, name: 'Decrease brightness by 10%' }\n          ],\n          description: 'A HomeKit Dimmable Lightbulb with auto-dimmer managed by external switches/buttons. It can be Single Color, 2-channels selectable temperature color, RGB or RGBW. Hardware must be PWM controlled. Max total channels are 8.'\n        }\n      case 40:\n        return {\n          states: [\n            { id: 0, name: 'Door is opened and receives closing order' },\n            { id: 1, name: 'Door is closed and receives opening order' },\n            { id: 2, name: 'Door is opening and receives closing order' },\n            { id: 3, name: 'Door is closing and receives opening order' },\n            { id: 4, name: 'Sensor detects opened door' },\n            { id: 5, name: 'Sensor detects closed door' },\n            { id: 6, name: 'Sensor detects opening door' },\n            { id: 7, name: 'Sensor detects closing door' },\n            { id: 8, name: 'Obstruction not detected' },\n            { id: 9, name: 'Obstruction detected' },\n            { id: 10, name: 'Emergency stop' }\n          ],\n          reboot: [\n            { id: 0, name: 'Open' },\n            { id: 1, name: 'Closed (default)' },\n            { id: 5, name: 'Last state before restart' },\n            { id: 6, name: 'Opposite to last state before restart' }\n          ],\n          cyclic: true,\n          defaults: {\n            s: 0,\n            d: 30,\n            b: []\n          },\n          stateInputs: [\n            { id: 0, name: 'Set garage door to open' },\n            { id: 1, name: 'Set garage door to close' },\n            { id: 2, name: 'Indicates that garage door is open' },\n            { id: 3, name: 'Indicates that garage door is closed' },\n            { id: 4, name: 'Indicates that garage door is opening' },\n            { id: 5, name: 'Indicates that garage door is closing' },\n            { id: 6, name: 'Indicates that there is not obstruction' },\n            { id: 7, name: 'Indicates that there is obstruction' },\n            { id: 8, name: 'Emergency stop' }\n          ],\n          description: `A HomeKit Garage Door accessory. This can be used to manage your actual garage door driver, or be a stand-alone fully working driver.\n\nIf you don't use any sensor, or use only one, Door Working Time will be used to determine door state. If you use both sensors (for open and close: \"f2\" to \"f5\"), Door Working Time will be used as security measure alerting like a obstruction is detected if door does not complete operation before working time expires. If you also define an Obstruction Detection Time then the sum of the Working Time and Obstruction Detection Time is used.\n\nWhen an obstruction is detected, the door cannot be operated until the obstruction is removed.`\n        }\n      default:\n        return { states: [], reboot: [], description: '', defaults: {} }\n    }\n  }\n\n  @Prop({ type: Object, required: true, default: () => { } }) private readonly value!: baseAccessoryConfig\n\n\n  get acessoryStates() {\n    return this.acessoryType.states\n  }\n  get rebootStates() {\n    return this.acessoryType.reboot\n  }\n  get description() {\n    return this.acessoryType.description\n  }\n\n  private addPropertyIfNotExists(target: any, source: any) {\n    for (const key in source) {\n      if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n        this.$set(target, key, source[key])\n      }\n    }\n  }\n\n  @Watch('value', { immediate: true, deep: true })\n  onValueChanged(value: any, oldValue: any) {\n    console.log('val changed', value)\n    this.addPropertyIfNotExists(value, this.acessoryType.defaults)\n    this.$emit('input', value)\n  }\n\n  public AddProp(prop: string | number, value: any) {\n    this.$set(this.value, prop, value)\n  }\n  public AddEl(arr: any[], index: number, value: any) {\n    this.$set(arr, index, value)\n  }\n  public RemoveProp(prop: string | number) {\n    this.$delete(this.value, prop)\n  }\n  public RemoveEl(arr: any[], index: number) {\n    this.$delete(arr, index)\n  }\n\n}\n</script>\n\n\n<style >\n.basic {\n  margin-top: 2rem;\n}\n\n.buttons-container .field-body {\n  flex-wrap: wrap;\n}\n\n.buttons-container .field-body > .field {\n  width: 100%;\n}\n\n.button-remove {\n  margin-top: 1rem;\n}\n\n.acessory-states {\n  margin-bottom: 0.75rem;\n}\n\nspan.tag.is-primary {\n  margin-left: 0.5rem;\n}\n</style>\n"]}]}